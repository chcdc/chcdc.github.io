<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Carlos Carvalho - DevOps</title><link href="https://blog.chcdc.com.br/" rel="alternate"></link><link href="https://blog.chcdc.com.br/feeds/devops.atom" rel="self"></link><id>https://blog.chcdc.com.br/</id><updated>2021-06-22T22:27:45-02:00</updated><subtitle>Yet Another Blog</subtitle><entry><title>Git Básico</title><link href="https://blog.chcdc.com.br/posts/git-basico" rel="alternate"></link><published>2021-06-22T22:27:45-02:00</published><updated>2021-06-22T22:27:45-02:00</updated><author><name>Carlos Carvalho</name></author><id>tag:blog.chcdc.com.br,2021-06-22:/posts/git-basico</id><summary type="html">&lt;p&gt;Seguindo a sequencia, nesse post vamos iniciar o git com os comandos básicos.&lt;/p&gt;
&lt;p&gt;Os conceitos eu abordei &lt;a href="/posts/git-conceitos-e-historia/#os-tres-estados"&gt;aqui&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Para esse …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Seguindo a sequencia, nesse post vamos iniciar o git com os comandos básicos.&lt;/p&gt;
&lt;p&gt;Os conceitos eu abordei &lt;a href="/posts/git-conceitos-e-historia/#os-tres-estados"&gt;aqui&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Para esse Post, vamos utilizar um sistema baseado em Linux, porém os comandos são similares para sistemas Windows e MacOS.&lt;/p&gt;
&lt;!-- PELICAN_END_SUMMARY --&gt;
&lt;div class="toc"&gt;&lt;span class="toctitle"&gt;Indice:&lt;/span&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#instalacao"&gt;Instalação&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#configuracao-basica"&gt;Configuração Básica&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#configurando-nome-e-email"&gt;Configurando nome e email&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#configurando-preferencias"&gt;Configurando preferencias&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#criando-um-projeto-git"&gt;Criando um projeto git&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h3 id="instalacao"&gt;Instalação&lt;/h3&gt;
&lt;p&gt;Em sua grande maioria de sistemas linux pode ser obtido da seguinte forma:&lt;/p&gt;
&lt;p&gt;Debian like&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="go"&gt;sudo apt install git&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;RedHat Like&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="go"&gt;sudo yum install git&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Para windows pode ser obtido &lt;a href="https://git-scm.com/download/win"&gt;aqui&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="configuracao-basica"&gt;Configuração Básica&lt;/h3&gt;
&lt;p&gt;Para utilizar o git em sua maquina, precisamos primeiro configurar o autor. Pelo motivo de que todos os &lt;em&gt;commits&lt;/em&gt; devem ser identificados.&lt;/p&gt;
&lt;p&gt;O arquivo &lt;code&gt;/etc/gitconfig&lt;/code&gt; contém valores de configuração para todos usuários do sistema e todos os seus repositórios.
Se você passar a opção --system para git config, ele lerá e escreverá a partir deste arquivo especificamente.&lt;/p&gt;
&lt;p&gt;O arquivo &lt;code&gt;~/.gitconfig&lt;/code&gt; é específico para seu usuário.
Você pode fazer o Git ler e escrever a partir deste arquivo passando a opção --global.&lt;/p&gt;
&lt;p&gt;Em sistemas Windows, Git procura pelo arquivo &lt;code&gt;.gitconfig&lt;/code&gt; no diretório &lt;code&gt;$HOME&lt;/code&gt;.
Isto significa um dos diretórios a seguir: &lt;code&gt;C:\Documents&lt;/code&gt; e &lt;code&gt;Settings\$USER&lt;/code&gt;, para a maioria dos usuários.&lt;/p&gt;
&lt;h4 id="configurando-nome-e-email"&gt;Configurando nome e email&lt;/h4&gt;
&lt;p&gt;Podemos definir seu nome e email para serem adicionados como autor nos &lt;em&gt;commits&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;A configuração global no sistema é feita utilizando o seguinte comando:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="gp"&gt;$ &lt;/span&gt;git config --global user.name &lt;span class="s2"&gt;&amp;quot;Carlos Carvalho&amp;quot;&lt;/span&gt;
&lt;span class="gp"&gt;$ &lt;/span&gt;git config --global user.email carlos@chcdc.com.br
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Não se esqueça de alterar as informações, não quero ser dono dos seus &lt;em&gt;commits&lt;/em&gt;&lt;/p&gt;
&lt;h4 id="configurando-preferencias"&gt;Configurando preferencias&lt;/h4&gt;
&lt;p&gt;Vamos definir o editor &lt;em&gt;vim&lt;/em&gt; como padrão&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="gp"&gt;$ &lt;/span&gt;git config --global core.editor vim
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Configurar o Prompt colorido:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="gp"&gt;$ &lt;/span&gt;git config --global color.ui &lt;span class="nb"&gt;true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Essas configurações já são suficientes para continuarmos, caso queira ver todas as configurações, basta rodar o comando:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="gp"&gt;$ &lt;/span&gt;git config --list
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Para listar uma configuração específica, por exemplo o user.name:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="gp"&gt;$ &lt;/span&gt;git config user.name
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id="criando-um-projeto-git"&gt;Criando um projeto git&lt;/h3&gt;
&lt;p&gt;Para iniciar um repositório basta executar &lt;code&gt;git init&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Lembrando que é necessário estar no diretório do projeto em que se deseja utilizar o GIT&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="gp"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; projeto
&lt;span class="gp"&gt;$ &lt;/span&gt;git init
&lt;span class="go"&gt;Initialized empty Git repository in projeto/.git/&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Vamos criar o arquivo &lt;code&gt;README.md&lt;/code&gt;, ele é um arquivo de apresentação. Ele inicialmente será a nossa base&lt;/p&gt;
&lt;p&gt;Use o editor de texto de sua preferência, aqui usarei vim&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="gp"&gt;$ &lt;/span&gt;vim README.md
&lt;span class="gp"&gt;$ &lt;/span&gt;cat README.md
&lt;span class="go"&gt;Iniciando um repositorio&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Vamos dar um &lt;code&gt;git status&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="gp"&gt;$ &lt;/span&gt;git status
&lt;span class="go"&gt;On branch main&lt;/span&gt;

&lt;span class="go"&gt;No commits yet&lt;/span&gt;

&lt;span class="go"&gt;Untracked files:&lt;/span&gt;
&lt;span class="go"&gt;  (use &amp;quot;git add &amp;lt;file&amp;gt;...&amp;quot; to include in what will be committed)&lt;/span&gt;
&lt;span class="go"&gt;        README.md&lt;/span&gt;

&lt;span class="go"&gt;nothing added to commit but untracked files present (use &amp;quot;git add&amp;quot; to track)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Como podemos ver arquivo esta &lt;code&gt;Untracked&lt;/code&gt;, para adicionar ele vamos executar o &lt;code&gt;git add&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="gp"&gt;$ &lt;/span&gt;git add README.md
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Se rodarmos o &lt;code&gt;git status&lt;/code&gt; novamente, veremos que agora o arquivo README.md esta pronto para &lt;em&gt;commit&lt;/em&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="gp"&gt;$ &lt;/span&gt;git status
&lt;span class="go"&gt;On branch master&lt;/span&gt;

&lt;span class="go"&gt;No commits yet&lt;/span&gt;

&lt;span class="go"&gt;Changes to be committed:&lt;/span&gt;
&lt;span class="go"&gt;  (use &amp;quot;git rm --cached &amp;lt;file&amp;gt;...&amp;quot; to unstage)&lt;/span&gt;
&lt;span class="go"&gt;        new file:   README.md&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Agora vamos executar o commit, para isso vamos usar o comando &lt;code&gt;git commit -m&lt;/code&gt; . O parâmetro &lt;code&gt;m&lt;/code&gt; indica qual a mensagem que deseja passar no &lt;em&gt;commit&lt;/em&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="gp"&gt;$ &lt;/span&gt;git commit -m &lt;span class="s2"&gt;&amp;quot;Adicionando meu README.md&amp;quot;&lt;/span&gt;
&lt;span class="go"&gt;[master (root-commit) ef567d0] Adicionando meu README.md&lt;/span&gt;
&lt;span class="go"&gt; 1 file changed, 2 insertions(+)&lt;/span&gt;
&lt;span class="go"&gt; create mode 100644 README.md&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Pronto, fizemos o nosso primeiro &lt;em&gt;commit&lt;/em&gt;!!&lt;/p&gt;
&lt;p&gt;Podemos ver nossas alterações utilizando o &lt;code&gt;git log&lt;/code&gt;.
Onde temos o hash do commit, o author do commit e a data em que o commit foi realizado. (Talvez meu commit seja do futuro!)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="gp"&gt;$ &lt;/span&gt;git log
&lt;span class="go"&gt;commit ef567d0a3cef19e36ee75fd9251ebfb929a10b46 (HEAD -&amp;gt; master)&lt;/span&gt;
&lt;span class="go"&gt;Author: Carlos Carvalho &amp;lt;carlos@chcdc.com.br&amp;gt;&lt;/span&gt;
&lt;span class="go"&gt;Date:   Tue Jan 18 21:22:23 2061 -0300&lt;/span&gt;

&lt;span class="go"&gt;    Adicionando meu README.md&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;O proximo comando é o &lt;code&gt;git diff&lt;/code&gt;.
Então vamos fazer uma alteração no &lt;code&gt;README.md&lt;/code&gt;. 
Faça a edição no seu editor favorito.&lt;/p&gt;
&lt;p&gt;Ao executar o &lt;code&gt;git diff&lt;/code&gt; temos a seguinte saida:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="gp"&gt;$ &lt;/span&gt;git diff
&lt;span class="go"&gt;diff --git a/README.md b/README.md&lt;/span&gt;
&lt;span class="go"&gt;index abb520e..f603704 100644&lt;/span&gt;
&lt;span class="go"&gt;--- a/README.md&lt;/span&gt;
&lt;span class="go"&gt;+++ b/README.md&lt;/span&gt;
&lt;span class="go"&gt;@@ -1,2 +1,2 @@&lt;/span&gt;
&lt;span class="go"&gt;-Iniciando um repositório&lt;/span&gt;
&lt;span class="go"&gt;+### Novo Projeto de colonização lunar&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Nesse exemplo, removemos o texto &lt;strong&gt;Iniciando um repositório&lt;/strong&gt; e inserimos o texto &lt;strong&gt;Novo Projeto de colonização lunar&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Como podemos ver, ele mostrou, utilizando o simbolo &lt;em&gt;+&lt;/em&gt;, o que adicionamos e utilizando o simbolo &lt;em&gt;-&lt;/em&gt;, o que removemos.&lt;/p&gt;
&lt;p&gt;O &lt;code&gt;git diff&lt;/code&gt; nos permite ver qualquer alteração antes de fazer o &lt;em&gt;commit&lt;/em&gt;, ele se torna um dos comandos mais importantes no workflow, sempre utilize ele pois assim pode revisar o que esta enviando.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Lembrando que o &lt;code&gt;git diff&lt;/code&gt; deve ser executado antes de adicionarmos o arquivo em staging&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Vamos adicionar o arquivo e fazer o commit dessas mudanças&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="gp"&gt;$ &lt;/span&gt;git add README.md
&lt;span class="gp"&gt;$ &lt;/span&gt;git commit -m &lt;span class="s2"&gt;&amp;quot;Novo projeto lunar&amp;quot;&lt;/span&gt;
&lt;span class="go"&gt;[master 014982d] Novo projeto lunar&lt;/span&gt;
&lt;span class="go"&gt; 1 file changed, 1 insertion(+), 1 deletion(-)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Como resultado ele nos mostrou que houve:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1 arquivo alterado (README.md)&lt;/li&gt;
&lt;li&gt;1 inserção (### Novo Projeto de colonização lunar)&lt;/li&gt;
&lt;li&gt;1 remoção (Iniciando um repositório)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Então nesse post vimos como criar um repositório local , inserir arquivos, ver alterações, adicionar e fazer o commit dos arquivos.&lt;/p&gt;
&lt;p&gt;Com esses comandos já podemos trabalhar com o básico do git.&lt;/p&gt;
&lt;p&gt;Simples Assim 😆&lt;/p&gt;
&lt;p&gt;&lt;a href="http://git-scm.com/book/pt-br"&gt;Fonte&lt;/a&gt;&lt;/p&gt;</content><category term="DevOps"></category><category term="git"></category></entry><entry><title>Git Conceitos e História</title><link href="https://blog.chcdc.com.br/posts/git-conceitos-e-historia" rel="alternate"></link><published>2021-06-22T22:27:45-02:00</published><updated>2021-06-22T22:27:45-02:00</updated><author><name>Carlos Carvalho</name></author><id>tag:blog.chcdc.com.br,2021-06-22:/posts/git-conceitos-e-historia</id><summary type="html">&lt;p&gt;Nesse post vamos falar um pouco sobre a história e os conceitos básicos do GIT.&lt;/p&gt;
&lt;!-- PELICAN_END_SUMMARY --&gt;

&lt;h3 id="historia"&gt;Historia&lt;/h3&gt;
&lt;p&gt;O núcleo (kernel) do …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Nesse post vamos falar um pouco sobre a história e os conceitos básicos do GIT.&lt;/p&gt;
&lt;!-- PELICAN_END_SUMMARY --&gt;

&lt;h3 id="historia"&gt;Historia&lt;/h3&gt;
&lt;p&gt;O núcleo (kernel) do Linux é um projeto de código aberto com um escopo bastante grande.&lt;/p&gt;
&lt;p&gt;Em 2002, o projeto do núcleo do Linux começou usar uma DVCS proprietária chamada BitKeeper.&lt;/p&gt;
&lt;p&gt;Em 2005, a relação entre a comunidade que desenvolveu o núcleo do Linux e a empresa que desenvolveu BitKeeper quebrou em pedaços, e a ferramenta passou a ser paga.&lt;/p&gt;
&lt;p&gt;Isto alertou a comunidade que desenvolvia o Linux (e especialmente Linus Torvalds, o criador do Linux) a desenvolver a sua própria ferramenta baseada em lições aprendidas ao usar o BitKeeper.&lt;/p&gt;
&lt;p&gt;Algumas metas do novo sistema era os seguintes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Velocidade&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Projeto simples&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Forte suporte para desenvolvimento não-linear (milhares de ramos paralelos)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Completamente distribuído&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Capaz de lidar com projetos grandes como o núcleo o Linux com eficiência (velocidade e tamanho dos dados)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Desde seu nascimento em 2005, Git evoluiu e amadureceu para ser fácil de usar e ainda reter essas qualidades iniciais.&lt;/p&gt;
&lt;p&gt;Ele é incrivelmente rápido, é muito eficiente com projetos grandes, e ele tem um incrível sistema de ramos para desenvolvimento não linear&lt;/p&gt;
&lt;h3 id="como-funciona"&gt;Como Funciona&lt;/h3&gt;
&lt;p&gt;O Git considera que os dados são como uma imagem do sistema de arquivos.&lt;/p&gt;
&lt;p&gt;Toda vez que você fizer um commit, ou salvar o estado de seu projeto no Git, ele basicamente tira uma foto de todos os seus arquivos e armazena uma referência para esse conjunto de arquivos.&lt;/p&gt;
&lt;p&gt;Para ser eficiente, se os arquivos não foram alterados, o Git não armazena o arquivo novamente, apenas um link para o arquivo idêntico anterior já armazenado.
O Git trata seus dados mais como um fluxo do estado dos arquivos.&lt;/p&gt;
&lt;p&gt;&lt;img alt="git-snapshot" src="/images/snapshots-git.png"&gt;&lt;/p&gt;
&lt;h3 id="principais-caracteristicas"&gt;Principais Características&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;As operações são locais&lt;/li&gt;
&lt;li&gt;Tem integridade checksum&lt;/li&gt;
&lt;li&gt;Geralmente só adiciona dados&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="os-tres-estados"&gt;Os três estados&lt;/h3&gt;
&lt;p&gt;O git tem tres estados principais que seus arquivos podem estar:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Committed&lt;/strong&gt;: Os dados estão armazenados de forma segura em seu banco de dados local.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Modified&lt;/strong&gt;: Significa que o arquivo foi alterado, mas ainda não fez o commit no seu banco de dados.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Staged&lt;/strong&gt;: Significa que você marcou a versão atual de um arquivo modificado para fazer parte do seu próximo commit&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="workflow"&gt;Workflow&lt;/h3&gt;
&lt;p&gt;O fluxo de trabalho podemos descrever da seguinte forma:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Você modifica arquivos no seu diretório de trabalho&lt;/li&gt;
&lt;li&gt;Seleciona os arquivos, adicionando imagens deles à sua area de trabalho&lt;/li&gt;
&lt;li&gt;Você faz o commit, que leva os arquivos como eles estão na sua área de preparação e os armazena permanentemente no seu diretório Git.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="Workflow GIT" src="/images/workflow-git.png"&gt;&lt;/p&gt;
&lt;h3 id="repositorios-locais"&gt;Repositórios Locais&lt;/h3&gt;
&lt;p&gt;Seus repositórios locais consistem em três "árvores" mantidas pelo git&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Working Directory&lt;/strong&gt; : Contém os arquivos vigentes&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Index&lt;/strong&gt; : Funciona como uma área temporária (stage)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;HEAD&lt;/strong&gt; : Aponta para o ultimo commit feito&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="Workflow GIT Directories" src="/images/workflow-git-dir.png"&gt;&lt;/p&gt;
&lt;p&gt;A partir de um estado "não gerenciado", os arquivos entram em um ciclo de alterações de estado a cada modificação e posterior consolidação.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Workflow GIT States" src="/images/states-git.png"&gt;&lt;/p&gt;
&lt;p&gt;Esses são os conceitos iniciais do GIT, nos próximos posts vamos executar a instalação e fazer alguns commits e alterações.&lt;/p&gt;
&lt;p&gt;Simples Assim 😆&lt;/p&gt;
&lt;p&gt;&lt;a href="http://git-scm.com/book/pt-br"&gt;Fonte&lt;/a&gt;&lt;/p&gt;</content><category term="DevOps"></category><category term="git"></category></entry></feed>